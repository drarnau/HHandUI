# Algorithm for _On Households and Unemployment Insurance_ by Sekyu Choi and Arnau Valladares-Esteban
<!-- ### To-do/keep in mind
- Codes are for computers to execute and for humans to read.
- The code for couples should:
  - Have separate utility for the male and the female within the same maximization problem -->

## Main idea
The algorithm receives **parameters** from the outside world, solves the model, and returns **moments of the simulated data** as output.

### Parameters and Fundamentals
There are three types of parameters (mutually exclusive categories):
- *Numerical*: Are **not** part of the mathematical representation of the model. Should not play any role in the Economic implications of the solution of the model. Should only be relevant for speed and precision. Examples include: grid sizes, tolerance values, etc.
- *Assigned*: Are part of the mathematical representation of the model. Are chosen by us outside of the calibration exercise.
- *Calibrated*: Are determined by the calibration exercise in which we minimize the distance between the moments generated by the model and the moments observed in the real-world data.

### Mains steps to solve the model
1. Compute **decision rules** using value function iteration.
  - Use Golden search method to find value of assets that solves the Bellman equations.
2. Use **decision rules** to simulate life of a large number of agents and compute targeted moments.

## Fortran implementation considerations

- [Arrays access](https://docs.julialang.org/en/stable/manual/performance-tips/#Access-arrays-in-memory-order,-along-columns-1)
> A rule of thumb to keep in mind is that with column-major arrays, the first index changes most rapidly. Essentially this means that looping will be faster if the inner-most loop index is the first to appear in a slice expression.

**Only delivers efficiency gains without -O3**

- With arrays of several dimensions, an extra dimension slows the code down significantly. Hence, the implementation of the unemployment insurance state is done *manually*. Instead of having an array `U(gp_a,gp_z,gp_gammas,1:2)`, we have two arrays `U_Ent` and `U_Not` both `(gp_a,gp_z,gp_gammas)`.**Only delivers efficiency gains without -O3**

## Dictionary of implementation names to model names
- `beta` is Î²: Discount factor of households.

## To do-list
- [] Results printed to txt files.
- [] Histogram assets in simulation to find appropriate bounds.
- [] Change from Tauchen to Rouwenhorst.
